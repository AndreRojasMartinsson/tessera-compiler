extern func i64 strstr(str: haystack, str: needle);
extern func i64 strcmp(str: s1, str: s2);
extern func i64 strlen(str: s);
extern func i64 strncmp(str: haystack, str: needle, i64: num);

pub func i64 std.string.len(str: s) {
  strlen(s)
}

pub func bool std.string.starts_with(str: haystack, str: needle) {
  strncmp(needle, haystack, strlen(needle)) == 0
}

pub func bool std.string.ends_with(str: haystack, str: needle) {
  let haystack_len: i64 = std::string::len(haystack);
  let needle_len: i64 = std::string::len(needle);

  if (needle_len == 0 && haystack_len > 0) || (needle_len > haystack_len) {
    false
  };

  let res: i64 = memcmp(haystack + haystack_len - needle_len, needle, needle_len)
  if res == 0 {
    true
  };

  false
}

pub func i64 std.string.equals(str: string_a, str: string_b) {
  let res: i64 = strcmp(string_a, string_b);

  if res == 0 {
    true
  };
  
  false
}

pub func i64 std.string.contains(str: haystack, str: needle) {
  let res: i64 = strstr(haystack, needle);

  if strlen(needle) == 0 && strlen(haystack) > 0 {
    false
  };

  if res == 0 {
    false
  };

  true
}

